SimpleSwitchMorph subclass: #LOCell	instanceVariableNames: 'mouseAction'	classVariableNames: ''	package: 'LightsOutGame'!!LOCell methodsFor: 'events' stamp: 'initialize 10/29/2025 01:23'!mouseUp: anEvent  mouseAction ifNotNil: [ mouseAction value ].! !!LOCell methodsFor: 'accessing' stamp: 'initialize 10/29/2025 00:04'!mouseAction: aBlock  ^ mouseAction := aBlock.! !!LOCell methodsFor: 'initialization' stamp: 'initialize 10/28/2025 23:57'!initialize  super initialize.  self label: ''.  self borderWidth: 2.  bounds := 0@0 corner: 16@16.  offColor := Color paleYellow.  onColor := Color paleBlue darker.  self useSquareCorners.  self turnOff.! !!LOCell methodsFor: 'testing' stamp: 'initialize 10/29/2025 01:18'!isOn  ^ self color = onColor! !BorderedMorph subclass: #LOGame	instanceVariableNames: 'cells moveCount size diagonalMode'	classVariableNames: ''	package: 'LightsOutGame'!!LOGame methodsFor: 'private - building' stamp: 'initialize 10/29/2025 01:31'!newCellAt: i at: j  "Create a cell for position (i,j) and add it to my on-screen   representation at the appropriate screen position. Answer the new cell"  | c origin |  c := LOCell new.origin := self innerBounds origin.self addMorph: c.c position: ((i - 1) * c width) @ ((j - 1) * c height) + origin.c mouseAction: [  moveCount := moveCount + 1.  self toggleNeighboursOfCellAt: i at: j ].^ c! !!LOGame methodsFor: 'initialization' stamp: 'initialize 10/29/2025 02:34'!initialize  | sampleCell width height n |  super initialize.  size ifNil: [ size := 10 ].  diagonalMode := false.        moveCount := 0.                    n := self cellsPerSide.  sampleCell := LOCell new.  width := sampleCell width.  height := sampleCell height.  self bounds: (50@50 extent: ((width*n) @ (height*n)) + (5 * self borderWidth)).  cells := Array2D new: n tabulate: [:i :j | self newCellAt: i at: j ].! !!LOGame methodsFor: 'game logic' stamp: 'initialize 10/29/2025 02:35'!toggleNeighboursOfCellAt: i at: j  (i > 1) ifTrue: [ (cells at: i - 1 at: j ) toggleState ].  (i < self cellsPerSide) ifTrue: [ (cells at: i + 1 at: j) toggleState ].  (j > 1) ifTrue: [ (cells at: i at: j - 1) toggleState ].  (j < self cellsPerSide) ifTrue: [ (cells at: i at: j + 1) toggleState ].  self diagonalsOn ifTrue: [    (i > 1 and: [ j > 1 ]) ifTrue: [ (cells at: i - 1 at: j - 1) toggleState ].    (i > 1 and: [ j < self cellsPerSide ]) ifTrue: [ (cells at: i - 1 at: j + 1) toggleState ].    (i < self cellsPerSide and: [ j > 1 ]) ifTrue: [ (cells at: i + 1 at: j - 1) toggleState ].    (i < self cellsPerSide and: [ j < self cellsPerSide ])      ifTrue: [ (cells at: i + 1 at: j + 1) toggleState ] ].! !!LOGame methodsFor: 'game config' stamp: 'initialize 10/29/2025 02:05'!cellsPerSide  ^ size! !!LOGame methodsFor: 'game controls' stamp: 'initialize 10/29/2025 02:16'!resetBoard  | n |  moveCount := 0.  n := self cellsPerSide.  1 to: n do: [:i |    1 to: n do: [:j |      (cells at: i at: j) turnOff ] ].! !!LOGame methodsFor: 'game controls' stamp: 'initialize 10/29/2025 02:35'!toggleDiagonals  diagonalMode := diagonalMode not.  self inform: (diagonalMode    ifTrue: ['Diagonals: ON']    ifFalse: ['Diagonals: OFF']).! !!LOGame methodsFor: 'game controls' stamp: 'initialize 10/29/2025 02:23'!randomizeWithDensity: aFloat  "Увімкнути випадково ~aFloat частку клітинок (0..1). Напр., 0.2 = 20%."  self resetBoard.  1 to: self cellsPerSide do: [:i |    1 to: self cellsPerSide do: [:j |      ((Random new next) < aFloat)        ifTrue: [ (cells at: i at: j) toggleState ] ] ].! !!LOGame methodsFor: 'as yet unclassified' stamp: 'initialize 10/29/2025 02:35'!diagonalsOn  ^ diagonalMode! !!LOGame methodsFor: 'as yet unclassified' stamp: 'initialize 10/29/2025 01:47'!showStats  self inform: ('Moves: {1}\Open cells: {2}\Launches: {3}'    format: { self moveCount. self openCellCount. self class launchCount }).! !!LOGame methodsFor: 'as yet unclassified' stamp: 'initialize 10/29/2025 02:05'!cellsPerSide: anInteger  size := anInteger! !!LOGame methodsFor: 'stats' stamp: 'initialize 10/29/2025 01:19'!openCellCount  | n k |  n := self cellsPerSide.  k := 0.  1 to: n do: [:i |    1 to: n do: [:j |      ((cells at: i at: j) isOn) ifTrue: [ k := k + 1 ] ] ].  ^ k! !!LOGame methodsFor: 'stats' stamp: 'initialize 10/29/2025 01:54'!moveCount^ moveCount! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!LOGame class	instanceVariableNames: 'TheGame LaunchCount size'!!LOGame class methodsFor: 'as yet unclassified' stamp: 'initialize 10/29/2025 01:44'!theGame  ^ TheGame! !!LOGame class methodsFor: 'as yet unclassified' stamp: 'initialize 10/29/2025 01:44'!launchCount  ^ LaunchCount ifNil: [ 0 ]! !!LOGame class methodsFor: 'world menu' stamp: 'initialize 10/29/2025 02:36'!menuCommandOn: aBuilder  <worldMenu>  (aBuilder item: #'LOGame')    order: 5;    with: [	      (aBuilder item: #'Run Game')        order: 0; action: [ self open ].      (aBuilder item: #'Exit Game')        order: 1; action: [ self close ].      (aBuilder item: #'Reset Board')        order: 2; action: [ TheGame ifNotNil: [ TheGame resetBoard ] ].      (aBuilder item: #'Show Stats')        order: 3; action: [ TheGame ifNotNil: [ TheGame showStats ] ].		(aBuilder item: #'New Random (20%)')  		  order: 4; action: [ TheGame ifNotNil: [ TheGame randomizeWithDensity: 0.2 ] ].		 (aBuilder item: #'Toggle Diagonals')  order: 5;  action: [ TheGame ifNotNil: [ TheGame toggleDiagonals ] ].].! !!LOGame class methodsFor: 'opening/closing' stamp: 'initialize 10/29/2025 01:42'!open  TheGame ifNil: [    LaunchCount := (LaunchCount ifNil: [ 0 ]) + 1.    TheGame := self new.    TheGame openInWorld ].  ^ TheGame   "щоб у Playground отримати посилання"! !!LOGame class methodsFor: 'opening/closing' stamp: 'initialize 10/29/2025 01:42'!close  TheGame ifNotNil: [    TheGame delete.    TheGame := nil ].! !Object subclass: #MyClass	instanceVariableNames: ''	classVariableNames: ''	package: 'LightsOutGame'!